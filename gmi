#!/usr/bin/env bash
#########################################################################
#	GMI - Get Machine Info						#
#	Copyright (C) 2015 Paul A. Hinchberger III			#
#########################################################################
#	This program is free software: you can redistribute it and/	#
#	or modify it under the terms of the GNU GPLv3 as published	#
#	by the Free Software Foundation.				#
#									#
#	This program is distributed in the hope that it will be		#
#	useful, but WITHOUT ANY WARRANTY; without even the implied	#
#	warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR		#
#	PURPOSE.  See the GNU GPLv3 for more details.			#
#									#
#	See <http://www.gnu.org/licenses/> for details.			#
#########################################################################

DMIDCBIN="$(command -v dmidecode)"

if [ -n "${DMIDCBIN}" ] && sudo -n "${DMIDCBIN}" -t 17 > /dev/null 2>&1; then
  RAM=$(awk "BEGIN {print ( $(sudo $(command -v dmidecode) -t 17 | grep 'Size:' | grep -v 'No Module Installed' | sed 's/\s\+//g' | cut -d: -f2 | tr '\n' '+' | sed 's/+$//g;s/GB/*2^20/g;s/MB/*2^10/g') ) / 2^20}")
  [ -z "${RAM}" ] && RAM=$(awk "BEGIN {print int ( $(vmstat -s | grep 'total memory' | cut -dK -f1 | sed 's/  *//g') / 1024 / 1024 * 100 + 0.5 ) / 100 }")
else
  echo "Add '%$(id -g -n $(whoami)) ALL=(ALL) NOPASSWD:${DMIDCBIN} -t 17' with 'visudo' to get exact RAM capacity." > /dev/stderr
  RAM=$(awk "BEGIN {print int ( $(vmstat -s | grep 'total memory' | cut -dK -f1 | sed 's/  *//g') / 1024 / 1024 * 100 + 0.5 ) / 100 }")
fi

MHZ=$( ( lscpu | grep 'CPU max MHz' > /dev/null && ( lscpu | grep 'CPU max MHz' | head -n 1 ) || ( lscpu | grep 'CPU MHz' | head -n 1 ) ) | cut -d: -f2 | cut -d. -f1 | sed 's/  *//g;' )
PMH=00${MHZ}
PMH=${PMH: -4}
GHZ="${PMH:0:1}.${PMH:1:2}"
PCC=$(cat /proc/cpuinfo | sort -u | grep -c '^core id')
PCC=${PCC/0/1} # For ARM devices which don't report core ids
LCC=$(cat /proc/cpuinfo | grep -c '^processor')
DST="$(uname -m | sed 's/^x86_64$/x64v1/g;s/x86_64-v/x64/g') $(cat /etc/os-release | grep PRETTY_NAME | cut -d\" -f2)"
PVN="$(lscpu | grep '^Vendor ID:' | sed 's/\s//g' | cut -d: -f2 | sed 's/\(Genuine\|Authentic\|ARM\)//g')"
PMN="$(lscpu | grep '^Model name' | sed 's/:\s\s*/:/g' | cut -d: -f2 | sed 's/\s/ /g')"
PMN="${PMN/AMD /}"		# Remove AMD (already specified in vendor string)
PMN="${PMN/Intel /}"		# Remove Intel (already specified in vendor string)
PMN="${PMN/ CPU/}"		# Redundant
PMN="${PMN/ Processor/}"	# Redundant
PMN="${PMN/ @*/}"		# Don't @ me ;)
PMN="${PMN/\([Tt][Mm]\)/}"	# Remove (TM)
PMN="${PMN/\([Rr]\)/}"		# Remove (R)
PMN="${PMN/ *[GM]Hz/}"		# Remove MHz speed (already specified with $GHZ)
PMN="${PMN/CentaurHauls /}"	# Remove CentaurHauls
PMN="${PMN/\(/}"		# Remove opening parenthesis
PMN="${PMN/\)/}"		# Remove closing parenthesis
PMN="${PMN/Pentium/P-}"		# Replace Pentium with P- (eg, Pentium III -> P-III)
shopt -s extglob
PMN="${PMN/ +([A-Za-z])?Core/}"	# Remove [n] Core (already specified with $PCC)
PMN="${PMN/ version +([0-9]).+([0-9])/}"	# Remove version string
shopt -u extglob

CPU=CPU

if [[ ${PMN} = *"with Radeon HD Graphics"* ]]; then
  CPU=APU
  PMN="${PMN/ with Radeon HD Graphics/}"
elif [[ ${PMN} = *"RADEON R"*"COMPUTE CORES"* ]]; then
  CPU=APU
  PMN="${PMN/ RADEON R*COMPUTE CORES*/}"
fi

set -e
flags=$(grep '^flags\b' < /proc/cpuinfo | head -n 1)
flags=" ${flags#*:} "

ckflags() {
  for flag; do
    case "$flags" in
      *" $flag "*) :;;
      *) return 1;;
    esac
  done
}

# Actually vme only denotes an i386, but modern code won't run on those, so...
ckflags vme && PAT=i486 && \
ckflags cx8 fpu mmx && PAT=i586 && \
ckflags cmov fxsr sse && PAT=i686 && \
ckflags sse2 && PAT=i786 && \
ckflags lm syscall && PAT=x64v1 && \
ckflags cx16 lahf_lm popcnt sse4_1 sse4_2 ssse3 && PAT=x64v2 && \
ckflags avx avx2 bmi1 bmi2 f16c fma abm movbe xsave && PAT=x64v3 && \
ckflags avx512f avx512bw avx512cd avx512dq avx512vl && PAT=x64v4
set +e

if [ -z "${PAT}" ]; then
  PAT="$(gcc -c -Q -march=native --help=target | grep 'march= ' | sed 's/.*=\s*//;s/+.*//;s/-//g;s/arm/ARM/')"
fi

if type Xorg &> /dev/null; then
  DTE="Xorg (Unkown/No DE)"
  type icewm &> /dev/null && DTE="IceWM" # has to be first as it can be used stand-alone or with other DEs
  type pekwm &> /dev/null && DTE="PekWM" # has to be first as it can be used stand-alone or with other DEs
  type openbox-session &> /dev/null && DTE="Openbox" # has to be first as it can be used stand-alone or with other DEs
  type gnome-session &> /dev/null && DTE="GNOME 3" # has to be first as it can be used by DEs based on it
  type budgie-desktop &> /dev/null && DTE="Budgie"
  type cinnamon-session &> /dev/null && DTE="Cinnamon"
  type plasma-desktop &> /dev/null && DTE="Plasma 4"
  type plasmashell &> /dev/null && DTE="Plasma 5"
  type startdde &> /dev/null && DTE="Deepin"
  type startlxde &> /dev/null && DTE="LXDE"
  type startlxqt &> /dev/null && DTE="LXQt"
  type mate-session &> /dev/null && DTE="MATE"
  type startxfce4 &> /dev/null && DTE="XFCE"
else
  DTE="CLI"
fi

echo "${PAT} ${PVN}${PVN//[A-Za-z]*/ }${PMN} ${GHZ}GHz ${PCC}c/${LCC}t ${CPU} with ${RAM}GB RAM running ${DST} ${DTE}"

