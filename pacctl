#!/usr/bin/env sh

# Currently supported commands
# ${0} list <base|base-devel|base-extra|core|expanded-base|explicit|modded-configs|repo|xorg>
# ${0} remove <all-but-base|all-but-core|all-but-xorg|orphans>
# ${0} update <ignored|mirrorlist|system|zfs>

NEWLINE='
'

CURL_BIN=$(command -v curl)
GREP_BIN=$(command -v grep)
PACMANBIN=$(command -v pacman)
REFLECTOR=$(command -v reflector)
SED_BIN=$(command -v sed)
SUDO_BIN=$(command -v sudo)

[ -z "${CURL_BIN}" ] && echo "Could not find curl" && exit 2
[ -z "${GREP_BIN}" ] && echo "Could not find grep" && exit 3
[ -z "${PACMANBIN}" ] && echo "Could not find pacman" && exit 5
[ -z "${SED_BIN}" ] && echo "Could not find sed" && exit 7

GET_PRIVILEGE() {
  while ! ${SUDO_BIN} true; do
    continue
  done
}

case "${1}" in
  dl|down|download)
    case "${2}" in
      updates) GET_PRIVILEGE && ${SUDO_BIN} pacman -Syuw --noconfirm;;
    esac
    ;;
  ls|list)
    THINK_ABOUT() {
      CATEGORY="${1}"
      shift
      for PACKAGE in $@; do
        printf '\033[2K\rThinking about %s:%s' "${CATEGORY}" "${PACKAGE}" > /dev/stderr
        pactree -ul "${PACKAGE}" > /dev/null 2>&1 && OPTS=ul || OPTS=sul
        NEW_PACKAGES="$(pactree "-${OPTS}" "${PACKAGE}")"
        if [ -n "${NEW_PACKAGES}" ]; then
          if [ -n "${PACKAGE_LIST}" ]; then
            PACKAGE_LIST="${PACKAGE_LIST}${NEWLINE}"
          fi
          PACKAGE_LIST="${PACKAGE_LIST}${NEW_PACKAGES}"
        fi
      done
      printf "\033[2K\r" > /dev/stderr
      printf '%s\n' "$(echo "${PACKAGE_LIST}" | sort -u | tr '\n' ' ')"
    }

    case "${2}" in
      base) echo "$(pactree -ul base | sort | tr '\n' ' ')";;
      base-devel) THINK_ABOUT base-devel $(pacman -Sgq base-devel | sort | tr '\n' ' ');;
      base-extra) THINK_ABOUT base-extra linux linux-headers linux-hardened linux-hardened-headers linux-lts linux-lts-headers linux-zen-headers linux-firmware grub refind syslinux nano vim sudo;;
      core) THINK_ABOUT core $(pacman -Slq core | sort | tr '\n' ' ');;
      expanded-base) printf '%s\n%s\n%s\n' "$(pacctl list base | tr ' ' '\n')"p "$(pacctl list base-devel | tr ' ' '\n')" "$(pacctl list base-extra | tr ' ' '\n')" | sort -u | tr '\n' ' '; echo;;
      explicit) echo "$(pacman -Qenq | sort | tr '\n' ' ')";;
      modded-configs) pacman -Qii | grep '^MODIFIED' | sed 's/MODIFIED\t//g' ;;
      repo) echo "$(pacman -Slq "${3}" | sort | tr '\n' ' ')";;
      xorg) THINK_ABOUT xorg $(pacman -Sgq xorg | sort | tr '\n' ' ');;
    esac
  ;;
  rm|rem|remove)
    INSTALLED="$(mktemp)"
    pacman -Qq | sort > "${INSTALLED}"
    COMPARETO="$(mktemp)"
    GET_PRIVILEGE || exit 1
    case "${2}" in
      all-but-base) pacctl list expanded-base | tr ' ' '\n' | sort > "${COMPARETO}"; ${SUDO_BIN} pacman -R $(comm -23 "${INSTALLED}" "${COMPARETO}");;
      all-but-core) pacctl list core | tr ' ' '\n' | sort > "${COMPARETO}"; ${SUDO_BIN} pacman -R $(comm -23 "${INSTALLED}" "${COMPARETO}");;
      all-but-xorg) echo "$(pacctl list xorg | tr ' ' '\n')${NEWLINE}$(pacctl list core | tr ' ' '\n')" | sort -u > "${COMPARETO}"; ${SUDO_BIN} pacman -R $(comm -23 "${INSTALLED}" "${COMPARETO}");;
      orphans)
        PKG_LIST="$(pacman -Qtqd 2> /dev/null)"
        [ -z "${PKG_LIST}" ] && echo "No orphaned packages found." && exit 0
        ${SUDO_BIN} pacman -Rnsc ${PKG_LIST}
        ;;
    esac
  ;;
  up|upd|updt|update)
    case "${2}" in
      ignored) pacman -S --needed --noconfirm "$(grep '^IgnorePkg' /etc/pacman.conf | sed 's/.*= //g')";;
      zfs)
        GET_PRIVILEGE || exit 1
        ${SUDO_BIN} pacman -Sy
        VERSION_LESSTHAN() {
          [ "${1}" != "${2}" ] && true || false
        }
        printf "\033[1;34m::\033[97m ZFS Kernel Information:\033[0m\n"
        INSTALLED_KERNEL="$(pacman -Qqs Linux kernel | grep '^linux' | grep -v headers)"
        INSTALLED_HEADER="$(pacman -Qqs Linux kernel | grep headers | grep -v api)"
        LOCAL_KERNEL_VER="$(pacman -Qi "${INSTALLED_KERNEL}" | grep 'Version' | sed 's/.*: //g')"
        case "${INSTALLED_KERNEL}" in
          linux-zen) OFFICIAL_REPO="extra";;
                  *) OFFICIAL_REPO="core";;
        esac
        REPO_KERNEL_VER="$(pacman -Si "${OFFICIAL_REPO}/${INSTALLED_KERNEL}" | grep 'Version' | sed 's/.*: //g')"
        ZFS_KERNEL_VER="$(pacman -Si "zfs-${INSTALLED_KERNEL}/${INSTALLED_KERNEL}" | grep 'Version' | sed 's/.*: //g')"
        ZFS_MODULE_VER="$(pacman -Si "archzfs/zfs-${INSTALLED_KERNEL}" | grep 'Version' | sed 's/.*: //g')"
        ZFS_MOD_CORVER="${ZFS_MODULE_VER/*_/}"
        printf '%-30s%-30s\n'   " local/${INSTALLED_KERNEL}"                   "${LOCAL_KERNEL_VER}"
        printf '%-30s%-30s\n'   " ${OFFICIAL_REPO}/${INSTALLED_KERNEL}"        "${REPO_KERNEL_VER}"
        printf '%-30s%-30s\n'   " zfs-${INSTALLED_KERNEL}/${INSTALLED_KERNEL}" "${ZFS_KERNEL_VER}"
        printf '%-30s%-30s\n\n' " archzfs/zfs-${INSTALLED_KERNEL}"             "$(echo "${ZFS_MODULE_VER}" | sed 's/.*_//g')"
        if [ "${REPO_KERNEL_VER%.zen*}" = "${ZFS_MOD_CORVER%.zen*}" ]; then
          ARCHZFS_STATUS="current with"
          UPGRADED_KERNEL="linux-zen"
          [ -n "${INSTALLED_HEADER}" ] && UPGRADED_HEADER="${INSTALLED_HEADER}"
          UPGRADED_MODULE="zfs-${INSTALLED_KERNEL}"
        else
          ARCHZFS_STATUS="behind"
          UPGRADED_KERNEL="${INSTALLED_KERNEL}=${ZFS_KERNEL_VER}"
          [ -n "${INSTALLED_HEADER}" ] && UPGRADED_HEADER="${INSTALLED_HEADER}=${ZFS_KERNEL_VER}"
          UPGRADED_MODULE="zfs-${INSTALLED_KERNEL}=${ZFS_MODULE_VER}"
        fi
        printf '\033[1;33m ->\033[0m Repo archzfs is %s official.\n' "${ARCHZFS_STATUS}"
        if VERSION_LESSTHAN "${LOCAL_KERNEL_VER%.zen*}" "${ZFS_MOD_CORVER%.zen*}"; then
          printf '\033[1;33m ->\033[0m Upgrade to %s available.\n' "${INSTALLED_KERNEL}"
          ${SUDO_BIN} pacman -S --needed --noconfirm ${UPGRADED_KERNEL} ${UPGRADED_HEADER} ${UPGRADED_MODULE} zfs-utils
        else
          printf '\033[1;33m ->\033[0m No update available.\n'
        fi
      ;;
      mirror*)
        [ -z "${REFLECTOR}" ] && echo "Could not find reflector" && exit 6
        GEOIPURL="http://api.geoiplookup.net/"

        if [ -n "${SUDO_BIN}" ]; then
          COMMAND="${SUDO_BIN} ${REFLECTOR}"
          GET_PRIVILEGE || exit 1
        else
          COMMAND="${REFLECTOR}"
        fi

        if [ -n "${3}" ]; then
          printf "\033[1;34m::\033[97m User-determined county...\033[0m\n"
          COUNTRY="${3}"
        else
          printf "\033[1;34m::\033[97m Geolocating county...\033[0m\n"
          COUNTRY="$(${CURL_BIN} -s ${GEOIPURL} | grep countryname | sed 's/.*<countryname>\(.*\)<\/countryname>.*/\1/g')"
        fi

        printf " %s\n" "${COUNTRY}"
        printf "\033[1;34m::\033[97m Determining Best Mirrors...\033[0m\n"
        ${COMMAND} -p https -l 10 -f 5 -c "${COUNTRY}" -x mirror.theash.xyz -x ftp.sudhip.com -x dfw.mirror.rackspace.com --sort rate --save /etc/pacman.d/mirrorlist
        ${GREP_BIN} '^Server' /etc/pacman.d/mirrorlist | ${SED_BIN} 's/\(.*\)/ \1/g'
      ;;
      repos) GET_PRIVILEGE && ${SUDO_BIN} pacman -Sy;;
      system) GET_PRIVILEGE && ${SUDO_BIN} pacman -Syu;;
    esac
  ;;
esac
