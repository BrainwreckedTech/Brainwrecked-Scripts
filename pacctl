#!/usr/bin/env sh

# Currently supported commands
# ${0} list <base|base-devel|base-extra|core|expanded-base|explicit|modded-configs|repo|xorg>
# ${0} remove <all-but-base|all-but-core|all-but-xorg|orphans>
# ${0} update <ignored|mirrorlist|system|zfs>

MISSING='false'
NEWLINE='
'

for BINARY in comm curl pacman pactree printf sort sudo tr; do
  CMD_PATH="/usr/bin/${BINARY}"
  [ "${BINARY}" = "grep" ] || [ "${BINARY}" = "sed" ] && CMD_PATH="/bin/${CMD_PATH}"
  [ ! -e "${CMD_PATH}" ] && echo "Could not find ${CMD_PATH}" && MISSING='true'
done

${MISSING} && exit 1

GET_PRIVILEGE() {
  while ! /usr/bin/sudo true; do
    continue
  done
}

case "${1}" in
  dl|down|download)
    case "${2}" in
      kernel)
        GEOIPURL="http://api.geoiplookup.net/"
        GET_PRIVILEGE || exit 1
        if [ -n "${3}" ]; then
          /usr/bin/printf "\033[1;34m::\033[97m User-determined county...\033[0m\n"
          COUNTRY="${3}"
        else
          /usr/bin/printf "\033[1;34m::\033[97m Geolocating county...\033[0m\n"
          COUNTRY="$(/usr/bin/curl -s ${GEOIPURL} | /bin/grep countryname | /bin/sed 's/.*<countryname>\(.*\)<\/countryname>.*/\1/g')"
        fi
        /usr/bin/printf " %s\n" "${COUNTRY}"

        /usr/bin/printf "\033[1;34m::\033[97m Determining Best Mirror...\033[0m\n"
        SRVR_OUT="$(/usr/bin/reflector -p rsync -c "${COUNTRY}" -l 10 -f 5 --sort rate -x arch.mirror.square-r00t.net)"
        SRVR_LIN="$(echo "$SRVR_OUT" | /bin/grep '^Server' | /usr/bin/head -1)"
        SRVR_STR="$(echo "$SRVR_LIN" | /usr/bin/rev | /usr/bin/cut -d\  -f1 | /usr/bin/cut -d/ -f 4- | /usr/bin/rev)"

        SYS_ARCH="$(/bin/uname -m)"
        KRNL_PKG="$(/usr/bin/pacman -Qs 'linux' | /bin/grep 'local/linux' | /bin/grep -v 'headers\|firmware' | /usr/bin/cut -d\  -f1 | /usr/bin/cut -d/ -f2)"
        PKG_REPO='core'
        [ "${KRNL_PKG}" = "linux-hardened" ] || [ "${KRNL_PKG}" = "linux-zen" ] && PKG_REPO='extra'
        PKG_VRSN="$(/usr/bin/pacman -Si "${PKG_REPO}/${KRNL_PKG}" | /bin/grep Version | /usr/bin/rev | /usr/bin/cut -d\  -f1 | /usr/bin/rev)"
        PKG_FILE="${KRNL_PKG}-${PKG_VRSN}-${SYS_ARCH}.pkg.tar.zst"
        SRVR_OUT="$(/usr/bin/reflector -p rsync -c "${COUNTRY}" -l 10 -f 5 --sort rate)"
        SRVR_LIN="$(echo "$SRVR_OUT" | /bin/grep '^Server' | /usr/bin/head -1)"
        SRVR_STR="$(echo "$SRVR_LIN" | /usr/bin/rev | /usr/bin/cut -d\  -f1 | /usr/bin/cut -d/ -f 4- | /usr/bin/rev)"
        echo " ${SRVR_STR}"

        /usr/bin/printf "\033[1;34m::\033[97m Syncing %s...\033[0m\n" "${PKG_FILE}"
        /usr/bin/sudo /usr/bin/rsync -PHAXax "${SRVR_STR}/pool/packages/${PKG_FILE}" /var/cache/pacman/pkg/

        /usr/bin/printf "\033[1;34m::\033[97m Syncing %s...\033[0m\n" "${PKG_FILE}.sig"
        /usr/bin/sudo /usr/bin/rsync -PHAXax "${SRVR_STR}/pool/packages/${PKG_FILE}.sig" /var/cache/pacman/pkg/
        ;;
      updates) GET_PRIVILEGE && /usr/bin/sudo /usr/bin/pacman -Syuw --noconfirm;;
    esac
    ;;
  ls|list)
    THINK_ABOUT() {
      CATEGORY="${1}"
      shift
      for PACKAGE in ${@}; do
        /usr/bin/printf '\033[2K\rThinking about %s:%s' "${CATEGORY}" "${PACKAGE}" > /dev/stderr
        /usr/bin/pactree -ul "${PACKAGE}" > /dev/null 2>&1 && OPTS=ul || OPTS=sul
        NEW_PACKAGES="$(/usr/bin/pactree "-${OPTS}" "${PACKAGE}")"
        if [ -n "${NEW_PACKAGES}" ]; then
          if [ -n "${PACKAGE_LIST}" ]; then
            PACKAGE_LIST="${PACKAGE_LIST}${NEWLINE}"
          fi
          PACKAGE_LIST="${PACKAGE_LIST}${NEW_PACKAGES}"
        fi
      done
      /usr/bin/printf "\033[2K\r" > /dev/stderr
      /usr/bin/printf '%s\n' "$(echo "${PACKAGE_LIST}" | /usr/bin/sort -u | /usr/bin/tr '\n' ' ')"
    }

    case "${2}" in
      base) /usr/bin/pactree -ul base | /usr/bin/sort | /usr/bin/tr '\n' ' ';;
      base-devel) THINK_ABOUT base-devel $(/usr/bin/pacman -Sgq base-devel | /usr/bin/sort | /usr/bin/tr '\n' ' ');;
      base-extra) THINK_ABOUT base-extra linux linux-headers linux-hardened linux-hardened-headers linux-lts linux-lts-headers linux-zen-headers linux-firmware grub refind syslinux nano vim sudo;;
      core) THINK_ABOUT core $(/usr/bin/pacman -Slq core | /usr/bin/sort | /usr/bin/tr '\n' ' ');;
      expanded-base) /usr/bin/printf '%s\n%s\n%s\n' "$("${0}" list base | /usr/bin/tr ' ' '\n')"p "$("${0}" list base-devel | /usr/bin/tr ' ' '\n')" "$("${0}" list base-extra | /usr/bin/tr ' ' '\n')" | /usr/bin/sort -u | /usr/bin/tr '\n' ' '; echo;;
      explicit) /usr/bin/pacman -Qenq | /usr/bin/sort | /usr/bin/tr '\n' ' ';;
      modded-configs) /usr/bin/pacman -Qii | /bin/grep '^MODIFIED' | /bin/sed 's/MODIFIED\t//g' ;;
      repo) /usr/bin/pacman -Slq "${3}" | /usr/bin/sort | /usr/bin/tr '\n' ' ';;
      xorg) THINK_ABOUT xorg $(/usr/bin/pacman -Sgq xorg | /usr/bin/sort | /usr/bin/tr '\n' ' ');;
    esac
  ;;
  rm|rem|remove)
    INSTALLED="$(mktemp)"
    /usr/bin/pacman -Qq | /usr/bin/sort > "${INSTALLED}"
    COMPARETO="$(mktemp)"
    GET_PRIVILEGE || exit 1
    case "${2}" in
      all-but-base) "${0}" list expanded-base | /usr/bin/tr ' ' '\n' | /usr/bin/sort > "${COMPARETO}"; /usr/bin/sudo /usr/bin/pacman -R $(/usr/bin/comm -23 "${INSTALLED}" "${COMPARETO}");;
      all-but-core) "${0}" list core | /usr/bin/tr ' ' '\n' | /usr/bin/sort > "${COMPARETO}"; /usr/bin/sudo /usr/bin/pacman -R $(/usr/bin/comm -23 "${INSTALLED}" "${COMPARETO}");;
      all-but-xorg) echo "$("${0}" list xorg | /usr/bin/tr ' ' '\n')${NEWLINE}$("${0}" list core | /usr/bin/tr ' ' '\n')" | /usr/bin/sort -u > "${COMPARETO}"; /usr/bin/sudo /usr/bin/pacman -R $(/usr/bin/comm -23 "${INSTALLED}" "${COMPARETO}");;
      orphans)
        PKG_LIST="$(/usr/bin/pacman -Qtqd 2> /dev/null)"
        [ -z "${PKG_LIST}" ] && echo "No orphaned packages found." && exit 0
        /usr/bin/sudo /usr/bin/pacman -Rnsc ${PKG_LIST}
        ;;
    esac
  ;;
  up|upd|updt|update)
    case "${2}" in
      ignored) /usr/bin/pacman -S --needed --noconfirm "$(/bin/grep '^IgnorePkg' /etc/pacman.conf | /bin/sed 's/.*= //g')";;
      zfs)
        GET_PRIVILEGE || exit 1
        /usr/bin/sudo /usr/bin/pacman -Sy || exit 2
        VERSION_LESSTHAN() {
          [ "${1}" != "${2}" ] && true || false
        }
        /usr/bin/printf "\033[1;34m::\033[97m ZFS Kernel Information:\033[0m\n"
        INSTALLED_KERNEL="$(/usr/bin/pacman -Qqs Linux kernel | /bin/grep '^linux' | /bin/grep -v headers)"
        INSTALLED_HEADER="$(/usr/bin/pacman -Qqs Linux kernel | /bin/grep headers | /bin/grep -v api)"
        LOCAL_KERNEL_VER="$(/usr/bin/pacman -Qi "${INSTALLED_KERNEL}" | /bin/grep 'Version' | /bin/sed 's/.*: //g')"
        case "${INSTALLED_KERNEL}" in
          linux-zen) OFFICIAL_REPO="extra";;
                  *) OFFICIAL_REPO="core";;
        esac
        REPO_KERNEL_VER="$(/usr/bin/pacman -Si "${OFFICIAL_REPO}/${INSTALLED_KERNEL}" | /bin/grep 'Version' | /bin/sed 's/.*: //g')"
        ZFS_KERNEL_VER="$(/usr/bin/pacman -Si "zfs-${INSTALLED_KERNEL}/${INSTALLED_KERNEL}" | /bin/grep 'Version' | /bin/sed 's/.*: //g')"
        ZFS_MODULE_VER="$(/usr/bin/pacman -Si "archzfs/zfs-${INSTALLED_KERNEL}" | /bin/grep 'Version' | /bin/sed 's/.*: //g')"
        ZFS_MOD_CORVER="$(/usr/bin/pacman -Si "zfs-${INSTALLED_KERNEL}" | /bin/grep 'Depends' | /usr/bin/tr ' ' '\n' | /bin/grep "${INSTALLED_KERNEL}" | cut -d= -f2)"
        ZFS_UTILS_VRSN="$(/usr/bin/pacman -Si "zfs-utils" | /bin/grep 'Version' | /bin/sed 's/ //g' | cut -d: -f2)"
        /usr/bin/printf '%-30s%-30s\n'   " local/${INSTALLED_KERNEL}"                   "${LOCAL_KERNEL_VER}"
        /usr/bin/printf '%-30s%-30s\n'   " ${OFFICIAL_REPO}/${INSTALLED_KERNEL}"        "${REPO_KERNEL_VER}"
        /usr/bin/printf '%-30s%-30s\n'   " zfs-${INSTALLED_KERNEL}/${INSTALLED_KERNEL}" "${ZFS_KERNEL_VER}"
        /usr/bin/printf '%-30s%-30s\n'   " archzfs/zfs-${INSTALLED_KERNEL}"             "$(echo "${ZFS_MODULE_VER}" | /bin/sed 's/.*_//g')"
        /usr/bin/printf '%-30s%-30s\n\n' " zfs-${INSTALLED_KERNEL}/zfs-utils"           "${ZFS_UTILS_VRSN%%-*}"
        if [ "${REPO_KERNEL_VER%.zen*}" = "${ZFS_MOD_CORVER%.zen*}" ]; then
          ARCHZFS_STATUS="current with"
          UPGRADED_KERNEL="${INSTALLED_KERNEL}"
          [ -n "${INSTALLED_HEADER}" ] && UPGRADED_HEADER="${INSTALLED_HEADER}"
          UPGRADED_MODULE="zfs-${INSTALLED_KERNEL}"
        else
          ARCHZFS_STATUS="behind"
          UPGRADED_KERNEL="${INSTALLED_KERNEL}=${ZFS_MOD_CORVER}"
          [ -n "${INSTALLED_HEADER}" ] && UPGRADED_HEADER="${INSTALLED_HEADER}=${ZFS_MOD_CORVER}"
          UPGRADED_MODULE="zfs-${INSTALLED_KERNEL}=${ZFS_MODULE_VER}"
        fi
        /usr/bin/printf '\033[1;33m ->\033[0m Repo archzfs is %s official.\n' "${ARCHZFS_STATUS}"
        if VERSION_LESSTHAN "${LOCAL_KERNEL_VER%.zen*}" "${ZFS_MOD_CORVER%.zen*}"; then
          /usr/bin/printf '\033[1;33m ->\033[0m ZFS module upgrade from %s to %s available.\n' "${LOCAL_KERNEL_VER}" "${ZFS_MOD_CORVER}"
          if [ "${ZFS_KERNEL_VER%.zen*}" = "${ZFS_MOD_CORVER%.zen*}" ] || [ "${REPO_KERNEL_VER%.zen*}" = "${ZFS_MOD_CORVER%.zen*}" ]; then
            /usr/bin/sudo /usr/bin/pacman -S --needed --noconfirm ${UPGRADED_KERNEL} ${UPGRADED_HEADER} ${UPGRADED_MODULE} zfs-utils
          else
            /usr/bin/printf '\033[1;33m ->\033[0m Cannot find %s.\n' "${UPGRADED_KERNEL}"
          fi
        else
          /usr/bin/printf '\033[1;33m ->\033[0m No update available.\n'
        fi
      ;;
      mirror*)
        GEOIPURL="http://api.geoiplookup.net/"

        GET_PRIVILEGE || exit 1

        if [ -n "${3}" ]; then
          /usr/bin/printf "\033[1;34m::\033[97m User-determined county...\033[0m\n"
          COUNTRY="${3}"
        else
          /usr/bin/printf "\033[1;34m::\033[97m Geolocating county...\033[0m\n"
          COUNTRY="$(/usr/bin/curl -s ${GEOIPURL} | /bin/grep countryname | /bin/sed 's/.*<countryname>\(.*\)<\/countryname>.*/\1/g')"
        fi

        /usr/bin/printf " %s\n" "${COUNTRY}"
        /usr/bin/printf "\033[1;34m::\033[97m Determining Best Mirrors...\033[0m\n"
        [ -e /usr/bin/reflector ] && /usr/bin/sudo /usr/bin/reflector -p https -l 10 -f 5 -c "${COUNTRY}" -x mirror.theash.xyz -x ftp.sudhip.com -x dfw.mirror.rackspace.com --sort rate --save /etc/pacman.d/mirrorlist
        /bin/grep '^Server' /etc/pacman.d/mirrorlist | /bin/sed 's/\(.*\)/ \1/g'
      ;;
      repos) GET_PRIVILEGE && /usr/bin/sudo /usr/bin/pacman -Sy;;
      system)
        GET_PRIVILEGE
        /usr/bin/sudo /usr/bin/pacman -Sy --needed --noconfirm archlinux-keyring
        /usr/bin/pacman -Qi chaotic-keyring > /dev/null 2>&1 && /usr/bin/sudo /usr/bin/pacman -S --needed --noconfirm chaotic-keyring
        /usr/bin/sudo /usr/bin/pacman -Su;;
    esac
  ;;
esac
