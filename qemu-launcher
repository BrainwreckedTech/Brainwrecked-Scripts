#!/bin/sh

# NOTES:
# - Use QXL/SPICE so qemu can run as another user
# - Must use nomodeset with QXL or DMs may crash on user logout or shutdown

function show_help() {
cat <<EndOfHelp
usage: ${0} [- options...]

main options:

      -m <MiB size>  Specify RAM available to VM  
      -p </dev/part> Partition that serves as the primary bootable drive
      -s </dev/part> Partition that serves as the secondary drive
      
ISO options:

      -b </path/to/iso> Bootable ISO (will boot this instead of primary drive)
      -d </path/to/iso> Seconday ISO (for drivers, etc.)
      
Utilties:

      -c              Chroot into partition (diagnostics, repairs, etc.)
      -h              This help text.
      -i              Initialize partition (MBR partition scheme)
      -l </dev/drive> List partitions on drive that have no known format.

Notes:

    * GPT partitions of type MBR Parition Scheme are expected.
    * There's no CLI tool to list partition formats, as set in the parition
           table, to stdout.
    * Most tools simply look at the first sector of partitions for the format.
    * Initialization creates an MBR table inside the partition, creates a
          single partition from 1MiB to -1s, formats it ext4, and creates a
          swap file equal to the size specified by -m <MiB size>.
    * Chroot uses losetup to access the partition within the partition
EndOfHelp
}


if [ ${EUID} != 0 -o -z "${SUDO_USER}" ]; then
  echo "Must use sudo to run as root." && exit 1
fi

NFSMT=/mnt/nfs
VIDEO="std"
VIDEO="qxl -spice port=6000,disable-ticketing -global qxl.vram_size=268435456"

CROOT=false
INITP=false

while getopts "b:cd:hil:m:p:s:" opt; do
  case "$opt" in
    b) BTISO="${OPTARG}" ;;
    c) CROOT=true ;;
    d) DRISO="${OPTARG}" ;;
    h) show_help && exit 0;;
    i) INITP=true ;;
    l) LSPTD="${OPTARG}" ;;
    m) RAMSZ="${OPTARG}" ;;
    p) PRIDR="${OPTARG}" ;;
    s) SCNDR="${OPTARG}" ;;
    '?') show_help >&2 && exit 1;;
  esac
done

shift $((OPTIND-1))

if ${CROOT}; then
  LOOPD=$(sudo losetup -fP --show ${PRIDR})
  fsck -faMT ${LOOPD}p1
  mkdir -p /mnt/crl
  mount -v ${LOOPD}p1 /mnt/crl
  mkdir -p /mnt/crl/${NFSMT}
  mount -v --bind ${NFSMT} /mnt/crl/${NFSMT}
  arch-chroot /mnt/crl
  umount /mnt/crl/${NFSMT}
  umount /mnt/crl
  losetup -d ${LOOPD}
  exit 0
fi

if [ -n "${LSPTD}" ]; then
  parted ${LSPTD} unit GB print |
    grep '^[0123456789 ]' |
    grep -v 'ext[234]\|ntfs\|btrfs\|xfs\|fat32\|reiserfs' |
    sed 's/^ //g' |
    sed 's/  */ /g' |
    cut -d\  -f1,4- |
    sed 's/\([[:digit:]]\) \([[:digit:]]\)/\1\t\2/g' |
    sed 's/GB /GB\t/g' |
    sed 's/^/sdb/g'
  exit 0
fi

if ${INITP}; then
  set -x
    type dcfldd &> /dev/null && DDBIN='dcfldd' || DDBIN='dd'
    ${DDBIN} if=/dev/zero of=${PRIDR} bs=1M
    echo -ne "i\n" | sudo parted ${PRIDR} mklabel msdos
    echo -ne "i\ni\n" | sudo parted ${PRIDR} mkpart primary ext4 1MiB -- -1s
    parted ${PRIDR:0:8} name ${PRIDR:8}
    LOOPD="$(sudo losetup -fP --show ${PRIDR})"
    mkfs -t ext4 ${LOOPD}p1
    mkdir -p /mnt/crl
    mount ${LOOPD}p1 /mnt/crl
    ${DDBIN} if=/dev/zero of=/mnt/crl/swapfile bs=1M count=${RAMSZ}
    umount /mnt/crl
    losetp -d ${LOOPD}
  set +x
fi

SDRVS="-drive file='${PRIDR}',index=0,media=disk,cache=none,if=virtio" && BTPRM="-boot c"
[ -n "${SCNDR}" ] &&SDRVS+=" -drive file='${SCNDR}',index=1,media=disk,cache=none,if=virtio"
[ -n "${BTISO}" ] && SDRVS+=" -drive file='${BTISO}',index=1,media=cdrom" && BTPRM="-boot d"
[ -n "${DRISO}" ] && SDRVS+=" -drive file='${DRISO}',index=2,media=cdrom"

echo "$SDRVS" | sed 's/ -/\n-/g'
echo "$BTPRM"

chown -v qemu ${PRIDR}
bash -c "sleep 1; su -c 'DISPLAY=:0.0 spicec -h localhost -p 6000 &> /dev/null' - ${SUDO_USER}" &
echo 'Press CTRL+C to force-quit qemu'
eval sudo qemu-system-x86_64 -runas qemu \
  -enable-kvm -cpu host -machine type=pc,accel=kvm -balloon virtio \
  -smp 2 -parallel none -serial none -usbdevice tablet \
  -m $RAMSZ -vga $VIDEO -net nic,model=virtio -net user ${SDRVS} ${BTPRM}
